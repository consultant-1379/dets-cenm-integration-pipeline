def updateIntegrationValues() {
    try {
            filename = "${HOME_DIR}/${INTEGRATION_VALUE_FILE}"
                values = readYaml file: filename
                values.global.persistentVolumeClaim.storageClass = "${STORAGE_CLASS}"
                values.global.ingress.enmHost = "${ENM_LAUNCHER_HOSTNAME}"
                values.global.timezone = "${TIME_ZONE}"
                values.global.rwx.storageClass = "${RWX_STORAGE_CLASS}"
                values."prometheus-operator".prometheusOperator.kubeletService.namespace = "${NAMESPACE}"
                values."prometheus-operator".kubelet.namespace = "${NAMESPACE}"
                values."prometheus-operator".prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchLabels.name = "${NAMESPACE}"
                values."prometheus-operator".prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.storageClassName = "${STORAGE_CLASS}"
                values."prometheus-operator"."prometheus-node-exporter".service.port = "${NODE_EXPORTER_PORT}"
                values."prometheus-operator"."prometheus-node-exporter".service.targetPort = "${NODE_EXPORTER_PORT}"
                values."eric-enm-monitoring-master".monitoring.autoUpload.ddpsite ="${DDPSITE}"
                values."eric-enm-monitoring-master".monitoring.autoUpload.account ="${ACCOUNT}"
                values."eric-enm-monitoring-master".monitoring.autoUpload.password ="${PASSWORD}"
                values."prometheus-operator".grafana.ingress.hosts[0] = "${GRAFANA_HOSTS}"


        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
    }
}

def emailReport(content){
    def DEFAULT_REPLYTO = 'EricssonHyderabad.ENMMisty@tcs.com,EricssonHyderabad.ENMDewdrops@tcs.com'

    def subject = "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ${currentBuild.currentResult}!"

    try {
        emailext(body: content, mimeType: 'text/html', from: 'jenkins_monitoring@ericsson.com',
            replyTo: DEFAULT_REPLYTO, subject: subject,
            to: "${Email_List}" )
    } catch( err ){
        echo "$err"
    }
}

def reportHeading(status){

    def deployResult
    def color
    def investigation

    if(status == 'Success'){
        deployResult = "Success"
        color = "#9ACD32"
        investigation = "NA"
    } else if(status == 'Failed'){
        deployResult = "Failed"
        color = "#DC143C"
        investigation = "In progress, will be included in a follow up email"
    } else if(status == 'Aborted'){
        deployResult = "Aborted"
        color = "#95A5A6"
        investigation = "(If applicable), will be included in a follow up email"
    }

    def report = "Hi All,\n\n <h2>${NAMESPACE} Deployment Result: <span style=\"background-color:${color};\">${status}</span></h2>"
    def MonitoringchartVersion = sh (script : "${helm} list -n ${NAMESPACE} | grep  Monitoring-${NAMESPACE} | awk \'{print \$(NF-2)}\'", returnStdout: true)
    report += "<li><strong>Monitoring Chart version :</strong> ${MonitoringchartVersion}</li>"
    report += "<li><strong>Please find the Phase 1 Deploy Job Details:</strong>  <a href=${BUILD_URL}>${BUILD_URL}</a></li>"
    report += "<li><strong>Investigation Results  :  ${investigation}</strong></li></ul>"
    report = report.replace("\n","</br>")
    return report
}

def printPods(){
    def failedState = sh (script : "${kubectl} -n ${NAMESPACE} get pods | egrep \'NAME|Running\' | egrep \'0/|NAME\'" , returnStdout: true)
    def initState = sh (script : "${kubectl} -n ${NAMESPACE} get pods | grep -v Running || true", returnStdout: true)
    def sidecarState= sh (script : "${kubectl} -n ${NAMESPACE} get pods | egrep \'NAME|Running\' | egrep \'1/2|NAME\'" , returnStdout: true)
    def report = "#kubectl -n ${NAMESPACE} get pods | egrep \'NAME|Running\' | egrep \'0/|NAME\' \n<pre>${failedState}</pre> \n\n\n #kubectl -n ${NAMESPACE} get pods | grep -v Running \n<pre>${initState}</pre> \n\n\n #kubectl -n ${NAMESPACE} get pods | egrep \'NAME|Running\' | egrep \'1/2|NAME\' \n<pre>${sidecarState}</pre>"
    echo "${report}"

    report = report.replace("\n","</br>")
    report += "<style> pre {display: block;font-family: Lucida Console, Monaco, monospace; white-space: pre;} </style>";

    return report
}

pipeline{
        agent {
            node{
                 label SLAVE
            }
        }
    environment {
        HOME_DIR = "${WORKSPACE}"
        https_proxy = "http://www-proxy.lmera.ericsson.se:8080/"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
    }
    stages{
        stage ('Clean workspace') {
          steps {
            deleteDir()
         }
       }
       stage('Checkout Cloud-Native pipeline code Git Repository') {
            steps {
                git branch: 'master',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage( 'Site Config Properties' ) {
            steps {
                 script{
                         def site_config_properties = readProperties  (file:"Site-Config-File/${environment_name}")
                         env.INTEGRATION_VALUE_FILE="eric-enm-monitoring-integration-values-${INTEGRATION_VALUE_VERSION}.yaml"
                         echo "${INTEGRATION_VALUE_FILE}"
                         env.KUBE_CRED = site_config_properties['KUBE_CRED']
                         env.NAMESPACE = site_config_properties['NAMESPACE']
                         env.STORAGE_CLASS = site_config_properties['STORAGE_CLASS']
                         env.RWX_STORAGE_CLASS =site_config_properties['RWX_STORAGE_CLASS']
                         env.TIME_ZONE=site_config_properties['TIME_ZONE']
                         env.NODE_EXPORTER_PORT=site_config_properties['NODE_EXPORTER_PORT']
                         env.ENM_LAUNCHER_HOSTNAME=site_config_properties['ENM_LAUNCHER_HOSTNAME']
                         env.DDPSITE = site_config_properties['DDPSITE']
                         env.ACCOUNT = site_config_properties['ACCOUNT']
                         env.PASSWORD = site_config_properties['PASSWORD']
                         env.GRAFANA_HOSTS = site_config_properties['GRAFANA_HOSTS']
                         env.EMAIL_LIST= "${Email_List}"
                         env.kubeConfig = "${workspace}/.kube/${KUBE_CRED}"
                         env.helm = "docker run --rm -v ${kubeConfig}:/root/.kube/config -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${cenm_utilities_docker_image} helm3"
                         env.kubectl = "docker run --rm  -v ${kubeConfig}:/root/.kube/config -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${cenm_utilities_docker_image} kubectl"
                      }
              }
        }
        stage( 'Connect KUBE_CRED' ) {
            steps {
                    sh 'mkdir -p ${PWD}/.kube && chmod 775 ${PWD}/.kube && cp -v ${PWD}/Kube-Config-Files/${KUBE_CRED} ${PWD}/.kube/${KUBE_CRED} && chmod 664 ${PWD}/.kube/${KUBE_CRED}'
                }
        }
       stage('Monitoring Chart Download'){
                steps{
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${MONITORING_INTEGRATION_CHART_VERSION}.tgz -o eric-enm-monitoring-integration-${MONITORING_INTEGRATION_CHART_VERSION}.tgz'
            }
        }
         stage('Update Integration Values'){
            steps{
                  script {
                     sh "wget https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/${INTEGRATION_VALUE_FILE}"
                     echo "Updating Integration values files"
                     updateIntegrationValues()
                 }
            }
        }
         stage('Install cENM Monitoring chart'){
                steps{
                      sh("${helm} install eric-enm-monitoring-integration-${NAMESPACE} --values ${INTEGRATION_VALUE_FILE}  eric-enm-monitoring-integration-${MONITORING_INTEGRATION_CHART_VERSION}.tgz -n ${NAMESPACE} --wait --timeout 600s")
                }
        }
    }
    post{
        failure {
            script{
                echo "Failure"
                def report = reportHeading("Failed")
                report += printPods()
                emailReport(report)
            }
        }
        aborted{
            script{
                echo "Aborted"
                def report = reportHeading("Aborted")
                report += printPods()
                emailReport(report)
            }
        }
        success{
            script{
                echo "Success"
                def report = reportHeading("Success")
                emailReport(report)
            }
        }
        always {
            script{
                currentBuild.displayName = "initial_install on : ${environment_name}"
                sh("cat ${HOME_DIR}/${INTEGRATION_VALUE_FILE}")
                archiveArtifacts "${INTEGRATION_VALUE_FILE}"
            }
        }
    }
}

