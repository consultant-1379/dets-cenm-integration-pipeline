def commonMethods

pipeline{
    agent {
            node
            {
               label slave
            }
        }
    options {
        timeout(time: 11, unit: 'HOURS')
    }
    parameters{
        string(
            name: 'DOCKER_CONFIG_FILE_PATH',
            defaultValue: '/var/container_data/jenkins_slave_cenm/.docker/config.json',
            description: 'docker config path location'
        )
        string (
            defaultValue: 'NONE', 
            description: 'JSON FORMAT IF specified will be merged into inegratiopn value file (will overrid values) ie. {\\"global\\":{\\"rwx\\": {\\"smrsSize\\":\\"100Gi\\"}}}', 
            name: 'VALUES_FILES_OVERRIDES'
        )
        
    }
    environment {
        SMRS_LIMIT = 50 
        HOME_DIR = "${WORKSPACE}"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
        helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        csar_package_name = "enm-installation-package"
        Client_HOME ="/home/cenmbuild"
        OQS_URL="https://atvoqs.athtem.eei.ericsson.se/api/deployments"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'master',
                        url: '${GERRIT_CENTRAL}/DETES/com.ericsson.de.stsoss/dets-cenm-integration-pipeline'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/DETES/com.ericsson.de.stsoss/dets-cenm-integration-pipeline
                '''
            }
        }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods.groovy")
                }
            }
        }
        stage('Delete docker image') {
            steps {
                script {
                    commonMethods.delete_build_utilities_image()
                }
            }
        }
        stage('Pull docker image') {
            steps {
                script {
                    sh "docker pull ${cenm_utilities_docker_image}"
                }
            }
        }
        stage( 'setup_kubeconfig_file_for_cluster' ) {
            steps {
                script{
                      commonMethods.extract_jq()
                      commonMethods.download_kube_config_file_from_dit()
                      commonMethods.read_site_config_info_from_dit()
                      commonMethods.set_kube_config_file()
                      commonMethods.get_cn_build_version_info()
               }
            }
        }
        stage('Clean CSAR folder and delete and pull utilities image in client machine'){
            when {
                allOf{
                    environment name: 'deployment_mechanism', value: 'csar'
                    expression{env.CLIENT_MACHINE_TYPE  =='client_machine'}
                   }
             }
              steps{
                  script{
                        commonMethods.client_cleancsar()
                        commonMethods.delete_and_pull_utilitiesimage_clientmachine()
                        }
                    }
             }
        stage( 'Login docker registry' ) {
            steps {
               script{
                   if ( env.deployment_mechanism == "charts"){
                       commonMethods.create_docker_secret()
                   }
                   else if (env.deployment_mechanism == "csar" && (env.CONTAINER_REGISTRY_USERNAME != '' && env.CONTAINER_REGISTRY_PASSWORD != '')){
                       commonMethods.create_docker_secret()
                   }
                   else(env.deployment_mechanism == "csar"){
                       echo "All the required details are not provided to execute login docker registry"
                       sh "exit 1"
                   }
              }
            }
        }
        stage( 'Download CSAR PACKAGE from nexus area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
              script{
                retry(3){
                  commonMethods.download_csar_package_nexus()
                }
              }
            }
        }
        stage( 'Download CSAR PACKAGE from release area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
               script{
                retry(3){
                    commonMethods.download_csar_package_release()
                }
               }
            }
        }
        stage('Extract csar package') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
            }
            steps {
                script {
                       commonMethods.extract_csar_package()
                       commonMethods.get_integration_charts_version()
                }
            }
        }
        stage('Perform Load/Retag/Push') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
             }
            steps {
                script {
                  commonMethods.csar_utils()
                }
            }
        }
        stage('Download Charts from CI Internal') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_ci_internal()
                   commonMethods.remove_tgz_with_artifacts()
                }
            }
        }
        stage('Download Charts from Release area') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_release_area()
                   commonMethods.remove_tgz_with_artifacts()
                }
            }
        }
        stage('Updating integration values'){
            steps{
                script{
                       if(env.CLIENT_MACHINE_TYPE =='client_machine' && env.deployment_mechanism =='csar'){
                               commonMethods.client_integrationvaluepath()
                               commonMethods.updateIntegrationValues()
                               commonMethods.client_pushfile()
                          }
                       else{
                             commonMethods.remove_yaml_with_artifacts()
                             commonMethods.get_integration_charts_path()
                             commonMethods.updateIntegrationValues()
                             commonMethods.overriding_key_value_pairs()
                          }
                }
            }
        }
        stage('cENM CSAR Deployment Delete'){
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
            }
            steps{
                script{
                       commonMethods.csar_uninstall()
                }
            }
        }

        stage('Apply integration values overrides'){
            when {
                expression { params.VALUES_FILES_OVERRIDES != 'NONE' && params.VALUES_FILES_OVERRIDES != ''}
            }
            steps{
                echo "Applying overrides"
                sh"""echo $VALUES_FILES_OVERRIDES > extra.json
                cat extra.json 
                if [[ "$integration_value_type" == "eric-enm-single-instance-production-integration-values" ]]; then 
                    smrs_size=\$(cat extra.json | jq -r  .global.rwx.smrsSize | tr -d '[:alpha:]')
                    if [ "\$smrs_size" -gt "$SMRS_LIMIT" ]; then 
                        sed -i "s/smrsSize\\":\\"\$smrs_size/smrsSize\\":\\"$SMRS_LIMIT/" extra.json
                    fi
                fi 
                jq -r . extra.json |  yq -p json -o yaml > extra.yaml
                cat extra.yaml
                cp cENM/Scripts/${integration_values_file_path} cENM/Scripts/${integration_values_file_path}.bck
                yq -i eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' cENM/Scripts/${integration_values_file_path} extra.yaml
                yq -i eval-all '. as \$item ireduce ({}; . * \$item)' cENM/Scripts/${integration_values_file_path} extra.yaml
                echo "Compare merged"
                [ "\$(diff <(yq -P 'sort_keys(..)' -o=props cENM/Scripts/${integration_values_file_path}) <(yq -P 'sort_keys(..)' -o=props cENM/Scripts/${integration_values_file_path}.bck))" ] || echo "no changes made"
                """


            }

        }
        stage('cENM Install'){
             stages {
                   stage('Install cENM BRO chart'){
                    when {
                         expression{env.bro_chart_version != ''}
                    }
                    steps{
                      script{
                           if(commonMethods.compare_productsetversions(env.product_set_version,"23.07.65-1")){
                             commonMethods.create_sftpmachine_secret()
                           }
                           commonMethods.start_time_deployment()
                           commonMethods.bro_integration_chart("install","600s")
                        }
                     }
                   }
                   stage('Install cENM Monitoring chart'){
                    when {
                         expression{env.monitoring_chart_version != ''}
                    }
                     steps{
                       script{
                          if (commonMethods.check_version_a_newer_than_version_b("${env.product_set_version}","21.03.57")){
                                 commonMethods.monitoring_integration_chart("install","1500s")
                           }
                          else {
                             echo "Stage-Install cENM Monitoring chart is skipped due to old cENM PS version"
                          }
                       }
                    }
                   }
                   stage('Start OQS'){
                     steps{
                       script{
                          commonMethods.start_queue("Install")
                           }
                       }
                   }

                   stage('Install cENM Pre Deploy chart'){
                    when {
                         expression{env.pre_deploy_chart_version != ''}
                    }
                    steps{
                       script{
                            commonMethods.pre_deploy_integration_chart("install","1500s")
                       }
                    }
                   }
                   stage('Install cENM Infra chart'){
                    when {
                           expression{env.infra_chart_version != ''}
                      }
                     steps{
                       script{
                             commonMethods.infra_integration_chart("install","6h")
                          }
                       }
                    }
                   stage('END OQS'){
                      steps{
                        script{
                            commonMethods.end_queue("Install")
                           }
                        }
                    }
                   stage('Install cENM Stateless chart'){
                     when {
                           expression{env.stateless_chart_version != ''}
                    }
                    steps{
                       script{
                             commonMethods.stateless_integration_chart("install","4h")
                             commonMethods.end_time_deployment()
                      }
                    }
                  }
                }
        }
        stage('check all the pods up and running'){
            steps{
               script{
                      commonMethods.checking_error_pods()
               }
            }
        }
        stage('check status of the containers of running pods'){
            steps{
               script{
                 retry(10){
                     commonMethods.checkrunningpods()
                 }
               }
            }
        }
        stage('Smoke test'){
            steps{
                script{
                       retry(5){
                                commonMethods.smokeTest()
                           }
                }
            }
        }
        stage('CheckPods Running'){
            steps{
                script{
                    retry(5){
                                 commonMethods.checkHealthyPods()
                            }
                }
            }
        }
        stage('Generate artifact file'){
             steps{
                  script{
                        commonMethods.generate_artifact_file()
                        }
                  }
                }
    }
    post{
        failure {
            script{
                   echo "Failure"
                      def report = commonMethods.reportHeading("Failed")
                      report += commonMethods.printPods()
                      commonMethods.emailReport(report)
            }
        }
        aborted{
            script{
                echo "Aborted"
                def report = commonMethods.reportHeading("Aborted")
                report += commonMethods.printPods()
                commonMethods.emailReport(report)
            }
        }
        success{
            script{
                  echo "Success"
                  def report = commonMethods.reportHeading("Success")
                  report +=commonMethods.printPods()
                  commonMethods.emailReport(report)
            }
        }
        always {
            script{
                currentBuild.displayName = "Install with ${deployment_mechanism} on: ${environment_name}"
                currentBuild.description = "<b>Bro Chart Version = ${bro_chart_version}<br>Monitoring chart version = ${monitoring_chart_version}<br>Pre Deploy Chart Version = ${pre_deploy_chart_version}<br>Infra Chart Version = ${infra_chart_version}<br>Stateless Chart Version = ${stateless_chart_version}<br>Integration Value Version = ${integration_value_version}</b>"
                sh("cat ${HOME_DIR}/cENM/Scripts/${integration_values_file_path}")
                archiveArtifacts "cENM/Scripts/${integration_values_file_path}"
            }
        }
    }
}
