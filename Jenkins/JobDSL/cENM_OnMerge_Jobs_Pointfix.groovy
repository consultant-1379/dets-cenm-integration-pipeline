import java.io.File

String projectsCommonFile = readFileFromWorkspace('Jenkins/Integration_OnMerge_Jobs')
String prepare_pipeline_name
String publish_pipeline_name

projectsCommonFile.eachLine {
    project_name -> createPrepareBuildJob(project_name)
}

projectsCommonFile.eachLine {
    project_name -> createPublishBuildJob(project_name)
}

String[] pipeline_name_split_list
def createPrepareBuildJob(project_name) {
        project_name_job = project_name.split('/').last()
        repo_format = project_name.replace(project_name_job, "")
        prepare_pipeline_name = project_name_job.replace("eric-enm-","");
        prepare_pipeline_name = prepare_pipeline_name + '-pointfix'
    pipelineJob(prepare_pipeline_name) {
        description ('ENM Cloud Native Build pipeline ' + prepare_pipeline_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        concurrentBuild(allowConcurrentBuild = false)
        parameters {
            stringParam('JENKINS_URL', 'https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443','Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443')
            stringParam('HELM_REPO_TOKEN', 'AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ', 'Authentication token of the repo')
            stringParam('ISO_VERSION')
            stringParam('BRANCH')
            stringParam('PRODUCT_SET')
        }
        logRotator {
            numToKeep(30)
        }
        triggers {
          gerrit {
              events {
                  changeMerged()
              }
              project("${repo_format}${project_name_job}", ['reg_exp:sprint-.*'])
          }
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch('${BRANCH}')
                        remote {
                            credentials('lciadm100_private_key')
                            url("${GERRIT_MIRROR}/" + project_name)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath("Jenkinsfile_Pointfix")
                lightweight(lightweight = false)
            }
        }
    }
}

def createPublishBuildJob(project_name) {
    publish_pipeline_name = project_name.split('/').last()
    publish_pipeline_name = publish_pipeline_name + '-pointfix'

    pipelineJob(publish_pipeline_name) {
        description ('ENM Cloud Native Build pipeline ' + publish_pipeline_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        concurrentBuild(allowConcurrentBuild = false)
        parameters {
            stringParam('PRODUCT_SET_VERSION')
            stringParam('INTEGRATION_CHART_VERSION')
            stringParam('HELM_REPO_TOKEN','AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ','helm token')
            stringParam('BRANCH')

        }
        logRotator {
            numToKeep(30)
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch('${BRANCH}')
                        remote {
                            credentials('lciadm100_private_key')
                            url("${GERRIT_MIRROR}/" + project_name)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath("Jenkinsfile_Publish")
            }
        }
    }
}

def RepoMap = [
'eric-enm-integration':'ssh://lciadm100@gerritmirror-ha.lmera.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration'
             ]

for (Repo in RepoMap){
  def repo_url = Repo.value
  def repo_name = Repo.key
  def jenkinsfile_path = 'JenkinsfilePreCommit'
  def pipeline_name = Repo.key + '-values-pointfix'

  pipelineJob(pipeline_name) {
      description ('ENM Cloud Native Integration value pipeline ' + pipeline_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
      concurrentBuild(allowConcurrentBuild = false)
          parameters {
            stringParam('HELM_REPO_TOKEN','AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ','helm token')
            stringParam('BRANCH')
          }
        logRotator {
            numToKeep(30)
        }
      triggers {
          gerrit {
              events {
                  changeMerged()
              }
              project('plain:OSS/com.ericsson.oss.containerisation/' + repo_name, ['reg_exp:sprint-.*'])
          }
      }
      definition {
          cpsScm {
            scm {
              git {
                branch('${BRANCH}')
                remote {
                  credentials('lciadm100_private_key')
                  url(repo_url)
                }
              }
            }
            scriptPath("Jenkinsfile_Pointfix")
           lightweight(lightweight = false)
          }
      }
  }
}
