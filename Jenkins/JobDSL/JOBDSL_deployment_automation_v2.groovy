import java.io.File

String pipeline_name
String projectsCommonFile = readFileFromWorkspace('Jenkins/DSL_Jobs')
projectsCommonFile.eachLine {
    project_name -> createPipelineBuildJob(project_name)
}

def createPipelineBuildJob(project_name) {
    pipelineJob(project_name) {
        description ('ENM Cloud Native Upgrade Build pipeline ' + project_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        logRotator {
            numToKeep(100)
        }
        parameters {
            choiceParam('Artifact_type',['csar_lite','csar','snapshot_csar_lite'],'This parameter acts as the flow controller to select the deployment mechanism either csar or csar-lite or snapshot_csar_lite.')
            choiceParam('use_case',['Install','Upgrade','Backup','Rollback','Restore','Teardown'],'Select the appropriate operation to be done.')
            stringParam('product_set_version', '','Provide clould native product set version')
            choiceParam('deployment_size',['small-production','extra-large-production','single-instance','multi-instance'],'Select the type of integration values type to be used.')
            choiceParam('orchestration_type',['helm','EVNFM'],'Provide the orchestration type with which deployment should be happen.')
            choiceParam('container_registry_type',['other','EVNFM'],'Select container registry which is to be used while the deployment time. When orchestration_type is selected as EVNFM. By default other container registry will be used.')
            stringParam('snapshot_csar_lite_location', '','Provide the location of the snapshot_csar_lite')
            stringParam('snapshot_integration_key_value_pairs', '','Provide the snapshot integration key value pairs to override')
            stringParam('backup_name', '','Provide the backup name only when use_case is selected as Backup/Rollback/Restore')
            choiceParam('scope',['ROLLBACK','DEFAULT'],'This parameter needs to be passed when use_case is selected as Backup.')
            stringParam('environment_name', '','The cluster in which the deployment needs to be done')
            labelParam('slave') {
               defaultValue("${SLAVE}")
               description('')
            }
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch('master')
                        remote {
                            credentials('lciadm100_private_key')
                            url("${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code")
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath("Jenkins/Jenkinsfile/jenkinsfiledeployment_v2")
                lightweight(lightweight = true)
            }
        }
    }
}

