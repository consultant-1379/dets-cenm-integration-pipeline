import java.io.File

String repo_list = readFileFromWorkspace('Jenkins/repo-list-for-hlc-version-update')
String repo_format

repo_list.eachLine {
    project_name -> createHLCBuildJob(project_name)
}

String[] pipeline_name_split_list

def createHLCBuildJob(project_name) {
        pipeline_name=project_name.split('/').last()
        repo_format = project_name.replace(pipeline_name, "")
        pipeline_hlc_name=pipeline_name + "_update-HLC-version-pointfix"
        String e2e_steps='''#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *  + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([CHART_VERSION: '\${CHART_VERSION}',
                  BRANCH: '\${BRANCH}'])
        .needDockerSocket(true)
        .toString()

def failedStage = ''
def Job_name = env.JOB_NAME.tokenize('_') as String[];
def pipeline_name = Job_name[0]

def sg_gerrit_repo= "${repo_format}${pipeline_name}"

pipeline {
      agent {
        label 'INT_Cloud_Native_Pointfix'
      }
     environment {
	   pipeline_name = "${pipeline_name}"
      }
      parameters {
        string(name: 'CHART_VERSION', description: 'The Common Library chart version (e.g. 1.65.77)')
        string(name: 'BRANCH', description: 'The pointfix version (e.g. )')
      }
    stages {
       stage ('Clean workspace') {
          steps {
              deleteDir()
            }
         }
         stage('Checkout Cloud-Native SG Git Repository') {
            steps {
                git branch: env.BRANCH,
                        url: "${GERRIT_MIRROR}/${sg_gerrit_repo}"
                sh "git remote set-url origin --push ${GERRIT_CENTRAL}/${sg_gerrit_repo}"
            }
        }
     stage('Update Chart.yaml file and precommit Verification') {
            steps {
                sh "${bob} update_hlc_version_pointfix --chart-name \${pipeline_name} --branch \${BRANCH} --gerrit-proj \${sg_gerrit_repo}"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Push Chart.yaml to pointfix branch') {
         steps {
               sh "cd ${pipeline_name} && git push origin ${BRANCH}"
           }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
       }
    }
    post {
        failure {
            mail to: 'EricssonHyderabad.ENMMisty@tcs.com,EricssonHyderabad.ENMDewdrops@tcs.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\\"${entry.value}\\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \\${PWD}
            |--user \\$(id -u):\\$(id -g)
            |-v \\${PWD}:\\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \\${HOME}/.m2:\\${HOME}/.m2
            |-v \\${HOME}/.docker:\\${HOME}/.docker
            |-v \\${HOME}:\\${HOME}
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\\$(for group in \\$(id -G); do printf ' --group-add %s' "\\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
       '''
       pipelineJob(pipeline_hlc_name) {
        description ('ENM Cloud Native Helm Chart Library Build pipeline ' + pipeline_hlc_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        parameters {
            stringParam("repo_format", "${repo_format}")
            stringParam('CHART_VERSION')
            stringParam('BRANCH')
        }
        logRotator {
            numToKeep(30)
        }
        definition {
            cps {
                sandbox()
                script(e2e_steps)
            }
        }
    }
}

