import java.io.File

String pipeline_name
String projectsCommonFile = readFileFromWorkspace('Jenkins/Design_install_jobs')
projectsCommonFile.eachLine {
    project_name -> createPipelineBuildJob(project_name)
}

def createPipelineBuildJob(project_name) {
    pipelineJob(project_name) {
        description ('ENM Cloud Native Build pipeline ' + project_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        concurrentBuild(allowConcurrentBuild = false)
        logRotator {
            numToKeep(30)
        }
        parameters {
            choiceParam('Job Type',['Install'],'Select Install for rollout of cENM.this selection will first teardown your project i.e delete all existing helm chart, pvc and jobs')
            stringParam('environment_name', '','Deployment name of cENM Cloud Deployment to be Install')
            stringParam('BRO_CHART_VERSION')
            stringParam('PRE_DEPLOY_CHART_VERSION')
            stringParam('INFRA_CHART_VERSION')
            stringParam('STATELESS_CHART_VERSION')
            stringParam('INTEGRATION_VALUE_VERSION')
            choiceParam('INTEGRATION_VALUES_TYPE',['eric-enm-integration-kaas-core-values','eric-enm-integration-openstack-core-values','eric-enm-integration-functional-kaas-values','eric-enm-integration-functional-test-values','eric-enm-integration-production-values'],'Select the type of integration-values file specific to the type of environment')
            labelParam('SLAVE') {
               defaultValue("${SLAVE}")
               description('The minimum required softwares and its versions needed for Slave are Kubernetes Client Version v1.17.3, Docker client version 17.04.0-ce, Helm version 3.2.0 or higher ')
        }
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch('master')
                        remote {
                            credentials('lciadm100_private_key')
                            url("ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code")
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath("Jenkins/Jenkinsfile/JenkinsfileDesign")
                lightweight(lightweight = true)
            }
        }
    }
}


listView('cENM Initial Install') {
    filterBuildQueue()
    filterExecutors()
    jobs {
        regex(/cENM_Install_.*/)
    }
    columns {
        status()
        weather()
        name()
        lastSuccess()
        lastFailure()
        lastDuration()
        buildButton()
    }
}

