import java.io.File

buildJobNames = generateBuidJobNames()
def generateBuidJobNames() {
    def list_of_build_job_names = []
    String repos = readFileFromWorkspace('Jenkins/repo-list-for-hlc-version-update')
    repos.eachLine { String project_name ->
        project_name = project_name.split("/").last()
        list_of_build_job_names << "\"" + project_name +"_update-HLC-version"+ "\""
    }
    return list_of_build_job_names
}

def createE2EBuildPipeline() {
String e2e_steps="""SG_PROJECT_LIST = ${buildJobNames}
pipeline {
    agent { node { label 'INT_Cloud_Native_Pointfix' } }
    environment {
        PIPELINE_LAST_STAGE_STATUS = 'UNKNOWN'
    }
    stages {
        stage('Updating HLC version in SG') {
            steps{
                script{
                    sh "touch hlc_failed_service_group_builds_pointfix"
                    for (def service_group_build in SG_PROJECT_LIST) {
                        def service_group_build_pointfix = service_group_build + "-pointfix"
                        try{
                            stage("Build \${service_group_build_pointfix}"){
                                retry(3) {
                                    def build = build(job: "\${service_group_build_pointfix}", propagate: false, wait: true, parameters: [string(name:"CHART_VERSION", value:String.valueOf("\${CHART_VERSION}")), string(name:"BRANCH", value:String.valueOf("\${BRANCH}"))])
                                    def BuildResult = build.getResult()
                                    if (BuildResult != "SUCCESS") {
                                        error 'FAIL'
                                    }
                                }
                            }
                        }catch (e) {
                            sh "echo \${service_group_build_pointfix} >> hlc_failed_service_group_builds_pointfix"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        stage('Generate Failed HLC Job File') {
            steps {
                script {
                    archiveArtifacts 'hlc_failed_service_group_builds_pointfix'
                    sh "rm -rf hlc_failed_service_group_builds_pointfix"
                }
            }
        }
    }
    post {
        failure {
            script {
                if (PIPELINE_LAST_STAGE_STATUS=='SUCCESS') {
                    currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS
                }
            }
        }
    }
}

"""
    pipelineJob('eric-enm-e2e_update-HCL-version-pointfix') {
        description ('ENM Cloud Native Build pipeline eric-enm-e2e-hlc-build - autogenerated using JobDSL - all manual changes will be overwritten!')
        parameters {
            stringParam('CHART_VERSION')
            stringParam('BRANCH')
            blockOn(['eric-enm-e2e-build']) {
                blockLevel('GLOBAL')
                scanQueueFor('ALL')
            }
        }
      //concurrentBuild(allowConcurrentBuild = false)
        properties {
        disableConcurrentBuilds()
        }
        definition {
            cps {
                sandbox()
                script(e2e_steps)
            }
        }
    }
}

createE2EBuildPipeline()

listView('ENM HLC Version Update Build') {
    filterBuildQueue()
    filterExecutors()
    jobs {
        regex(/eric-enm.*_update-HLC-version/)
    }
    columns {
        status()
        weather()
        name()
        lastSuccess()
        lastFailure()
        lastDuration()
        buildButton()
    }
}
