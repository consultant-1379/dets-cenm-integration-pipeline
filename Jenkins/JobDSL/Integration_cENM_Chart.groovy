import java.io.File

String projectsCommonFile = readFileFromWorkspace('Jenkins/Integration_Chart_Jobs')
String prepare_pipeline_name
String publish_pipeline_name

projectsCommonFile.eachLine {
    project_name -> createPrepareBuildJob(project_name)
}

projectsCommonFile.eachLine {
    project_name -> createPublishBuildJob(project_name)
}

String[] pipeline_name_split_list
def createPrepareBuildJob(project_name) {
         project_name_job = project_name.split('/').last()
        prepare_pipeline_name = project_name_job.replace("eric-enm-","");
    pipelineJob(prepare_pipeline_name) {
        description ('ENM Cloud Native Build pipeline ' + prepare_pipeline_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        //concurrentBuild(allowConcurrentBuild = false)
        properties {
        disableConcurrentBuilds()
        }
        parameters {
            stringParam('ISO_VERSION')
            stringParam('PRODUCT_SET')
            stringParam('SPRINT_TAG')
            stringParam('JENKINS_URL', 'https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443','Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443')
            stringParam('HELM_REPO_TOKEN', 'AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ', 'Authentication token of the repo')
            stringParam('REQUIREMENTS_FILE')
            stringParam('CHART_NAME',null,'Chart Name of dependency  to be updated')
            stringParam('CHART_VERSION',null,'Chart Version of dependency  to be updated')
            booleanParam('ALLOW_DOWNGRADE', false,'Allow Downgrade of chart dependency')
        }
        logRotator {
            numToKeep(30)
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch('master')
                        remote {
                            credentials('lciadm100_private_key')
                            url("${GERRIT_MIRROR}/" + project_name)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath("JenkinsfileIncaPublish")
                lightweight(lightweight = true)
            }
        }
    }
}

def createPublishBuildJob(project_name) {
    publish_pipeline_name = project_name.split('/').last()
    pipelineJob(publish_pipeline_name) {
        description ('ENM Cloud Native Build pipeline ' + publish_pipeline_name + ' - autogenerated using JobDSL - all manual changes will be overwritten!')
        //concurrentBuild(allowConcurrentBuild = false)
        properties {
        disableConcurrentBuilds()
        }
        parameters {
            stringParam('PRODUCT_SET_VERSION')
            stringParam('INTEGRATION_CHART_VERSION')
            stringParam('HELM_REPO_TOKEN','AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ','helm token')
        }
        logRotator {
            numToKeep(30)
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch('master')
                        remote {
                            credentials('lciadm100_private_key')
                            url("${GERRIT_MIRROR}/" + project_name)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath("Jenkinsfile_Publish")
            }
        }
    }
}

